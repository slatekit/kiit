import java.nio.file.Paths

buildscript {
    ext.kotlin_version = '${build.kotlin.version}'
    ext.slatekit_version = "${build.slatekit.version}"
    ext.slatekit_version_beta = "${build.slatekit.version.beta}"

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin:'application'
mainClassName = "${app.package}.RunKt"
sourceCompatibility = 1.8


repositories {
    jcenter()
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/codehelixinc/slatekit"
    }
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'

    compile "com.slatekit:slatekit-results:$slatekit_version"
    compile "com.slatekit:slatekit-common:$slatekit_version"
    compile "com.slatekit:slatekit-providers:$slatekit_version"
    compile "com.slatekit:slatekit-app:$slatekit_version"
    compile "com.slatekit:slatekit-apis:$slatekit_version"
    compile "com.slatekit:slatekit-server:$slatekit_version_beta"
}


compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()
}

def APP_NAME = "${app.name}"
def APP_VERSION = '0.9.0'
def APP_ROOT = "."
def APP_DIR_HOME = Paths.get(APP_ROOT).toString()
def APP_DIR_DIST = Paths.get(APP_DIR_HOME, "dist")
def APP_DIR_RELEASES = Paths.get(APP_DIR_HOME, "dist", "releases")
def APP_DIR_VERSION = Paths.get(APP_DIR_HOME, "dist", "releases", APP_VERSION)
def APP_ZIP_NAME = "${APP_NAME}-${APP_VERSION}.zip"
def APP_ZIP_FULL = Paths.get(APP_DIR_HOME, "dist", "releases", APP_ZIP_NAME)


/**
 * =======================================================================
 * Copies all the needed libraries/jars into the version directory
 * ./dist/releases/0.9.3
 * =======================================================================
 */
task pack(type: Copy) {
    dependsOn build

    // 1. Create jar with proper manifest
    // referencing all the needed jars
    jar {
       manifest {
           attributes(
                   'Main-Class': '${app.package}.RunKt',
                   "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
           )
       }
    }

    // 2. Create distribution directories
    // ./dist/releases/{version}
    // ./dist/releases/0.9.4
    mkdir "$APP_DIR_DIST"
    mkdir "$APP_DIR_RELEASES"
    mkdir "$APP_DIR_VERSION"
    mkdir "$APP_DIR_VERSION/conf"


    // 3. Copy all needed libraries/jars into version directory
    into "$APP_DIR_VERSION" from configurations.runtime

    // 4. Copy the server jar into the version directory
    from file("$buildDir/libs/${APP_NAME}.jar") into file("$APP_DIR_VERSION")

    // 5. Procfile for aws
    // web: java -jar blend-server.jar -env=dev -conf.dir=conf
    def proc = new File("${APP_DIR_VERSION}/Procfile")
    proc.write("web: java -jar ${APP_NAME}.jar -env=dev -conf.dir=conf")
}


/**
* Zips up the version directory into the dist/releases directory
*/
task aws(type: Zip) {
   dependsOn pack
   archiveFileName = APP_ZIP_NAME
   destinationDirectory = file("$APP_DIR_RELEASES")
   from "$APP_DIR_VERSION"
}