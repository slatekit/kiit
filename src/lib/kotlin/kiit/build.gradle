buildscript {
    ext.kotlin_version = '1.8.22'
    ext.ktor_version = '2.3.12'
    ext.kiit_version = file('../../../version.txt').text
    ext.kiit_version_beta = file('../../../version-beta.txt').text

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// NOTE: The version is set up in the settings.gradle file for all projects.
// THERE MAY BE A BETTER WAY TO DO THIS.
//
// SETUP
// This multi-module set up supports building in 2 modes
// 1. Mode = Binary ( references kiit dependencies via binary reference )
// 2. Mode = Source ( references kiit dependencies via source projects )
//
// MULTI
// 1. To run Publish, we need to build in Binary mode ( to publish from each project )
// 2. To run CI-Test, we need to build in Source mode ( to run unit-tests )
// 3. In order to do both 1 and 2 above, we need to have have version specified in settings
// 4. If version is supplied in build.gradle in all projects, loading of kiit will fail,
//    as there can only be 1 version supplied. However, but putting it into the settings,
//    we can remove the "version" reference in all build.gradle files but still have it work
//    when publishing artifacts ( since version of kotlin is needed
//
plugins {
    id "java"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" // version "$kotlin_version"
}

apply from: '../../../../build/gradle/gradle-utils.gradle'
apply plugin: 'application'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/slatekit/kiit"
        credentials {
            username = System.getenv('KIIT_INSTALL_ACTOR')
            password = System.getenv('KIIT_INSTALL_TOKEN')
        }
    }
}

ext.kiitSetupViaBinary = System.getenv('KIIT_PROJECT_MODE') != 'sources'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    //implementation "mysql:mysql-connector-java:5.1.48"
    implementation "mysql:mysql-connector-java:8.0.28"
//    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    implementation 'org.threeten:threetenbp:1.3.8'

    // /* <kiit_local>
    if( kiitSetupViaBinary ) {
        implementation "dev.kiit:results:$kiit_version"
        implementation "dev.kiit:common:$kiit_version"
        implementation "dev.kiit:context:$kiit_version"
        implementation "dev.kiit:app:$kiit_version"
        implementation "dev.kiit:apis:$kiit_version"
        implementation "dev.kiit:cli:$kiit_version"
        implementation "dev.kiit:meta:$kiit_version"
        implementation "dev.kiit:policy:$kiit_version"
        implementation "dev.kiit:serialization:$kiit_version"
        implementation "dev.kiit:telemetry:$kiit_version"
        implementation "dev.kiit:integration:$kiit_version"
        implementation "dev.kiit:connectors-cli:$kiit_version"
        implementation "dev.kiit:providers-logback:$kiit_version"
//        implementation "dev.kiit:providers-aws:$kiit_version"
//        implementation "dev.kiit:providers-datadog:$kiit_version"
//        implementation "dev.kiit:connectors-entities:$kiit_version"
//        implementation "dev.kiit:connectors-jobs:$kiit_version"
//        implementation "dev.kiit:db:$kiit_version"
//        implementation "dev.kiit:core:$kiit_version"
//        implementation "dev.kiit:cache:$kiit_version"
//        implementation "dev.kiit:comms:$kiit_version"
//        implementation "dev.kiit:http:$kiit_version"
//        implementation "dev.kiit:jobs:$kiit_version"
//        implementation "dev.kiit:cloud:$kiit_version"
//        implementation "dev.kiit:query:$kiit_version"
//        implementation "dev.kiit:entities:$kiit_version"
//        implementation "dev.kiit:orm:$kiit_version"
//        implementation "dev.kiit:integration:$kiit_version"
//        implementation "dev.kiit:server:$kiit_version"
    } else {
        // */
    implementation project(":kiit-result")
    implementation project(":kiit-common")
    implementation project(":kiit-utils")
    implementation project(":kiit-context")
    implementation project(":kiit-app")
    implementation project(":kiit-db")
    implementation project(":kiit-apis")
    implementation project(":kiit-cli")
    implementation project(":kiit-meta")
    implementation project(":kiit-policy")
    implementation project(":kiit-serialization")
    implementation project(":kiit-telemetry")
    implementation project(":kiit-requests")
    implementation project(":kiit-generator")
    implementation project(":kiit-integration")
    implementation project(":connectors-cli")
    implementation project(":providers-logback")
    implementation project(":providers-kafka")
//        implementation project(":connectors-entities")
//        implementation project(":connectors-jobs")
//        implementation project(":providers-aws")
//        implementation project(":providers-datadog")
//        implementation project(":kiit-core")
//        implementation project(":kiit-http")
//        implementation project(":kiit-cache")
//        implementation project(":kiit-jobs")
//        implementation project(":kiit-comms")
//        implementation project(":kiit-db")
//        implementation project(":kiit-query")
//        implementation project(":kiit-entities")
//        implementation project(":kiit-integration")
        implementation project(":kiit-server")
//        implementation project(":slatekit-samples")
    } //</kiit_local>
//    implementation project(":slatekit-examples")
//    implementation project(":slatekit-samples")
    implementation project(":kiit-tests")
}

// ==================================================================
// Slate Kit Component Info
// ==================================================================
def kiitComponentId = 'exe'
def kiitComponentName = 'Exe'
def kiitComponentDesc = 'Kiit Exe: CLI application'
def kiitComponentVersion = ext.kiit_version

// ==================================================================
// Slate Kit Setup mode: defaults to maven vs loading project sources
// ==================================================================
task info {
    println('kiit.setup     : ' + System.getenv('KIIT_PROJECT_MODE'))
    println('kiit.maven     : ' + kiitSetupViaBinary)
    println('kiit.comp.id   : ' + kiitComponentId)
    println('kiit.comp.name : ' + kiitComponentName)
    println('kiit.comp.desc : ' + kiitComponentDesc)
    println('kiit.comp.vers : ' + kiitComponentVersion)
    println()
    println('project.name       : ' + project.name)
    println('project.path       : ' + project.path)
    println('project.desc       : ' + project.description)
    println('project.projectDir : ' + project.projectDir)
    println('project.buildDir   : ' + project.buildDir)
    println()
    println('build.commit       : ' + gitCommitId())
    println('build.branch       : ' + gitBranchName())
    println('build.date         : ' + getBuildDate())
}

// https://www.anexinet.com/blog/six-ways-to-package-a-java-application-with-gradle/
// gradle build distZip
mainClassName = 'kiit.RunKt'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

//jar {
//    manifest {
//        attributes(
//                'Main-Class': 'kiit.RunKt',
//                "Class-Path": configurations.implementation.collect { it.getName() }.join(' ')
//        )
//    }
//}

//task copyAllJars(type: Copy) {
//    dependsOn build
//    into "lib"
//    from configurations.runtime
//}