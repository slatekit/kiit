buildscript {
    ext.kotlin_version = '1.6.20'
    ext.slatekit_version = new File('../version.txt').text
    ext.slatekit_version_beta = new File('../version-beta.txt').text

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

apply from: '../../../../build/gradle/slatekit-common.gradle'
apply plugin: 'application'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/slatekit/slatekit"
        credentials {
            username = System.getenv('SLATEKIT_INSTALL_ACTOR')
            password = System.getenv('SLATEKIT_INSTALL_TOKEN')
        }
    }
}

ext.slatekitSetupViaBinary = System.getenv('SLATEKIT_PROJECT_MODE') != 'sources'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
//    compile "mysql:mysql-connector-java:5.1.13"
//    compile 'com.squareup.okhttp3:okhttp:3.9.0'
    compile 'org.threeten:threetenbp:1.3.8'

    // /* <slatekit_local>
    if( slatekitSetupViaBinary ) {
        implementation "com.slatekit:slatekit-results:$slatekit_version"
        implementation "com.slatekit:slatekit-common:$slatekit_version"
        implementation "com.slatekit:slatekit-context:$slatekit_version"
        implementation "com.slatekit:kiit-app:$slatekit_version"
        implementation "com.slatekit:slatekit-meta:$slatekit_version"
        implementation "com.slatekit:slatekit-policy:$slatekit_version"
        implementation "com.slatekit:slatekit-serialization:$slatekit_version"
        implementation "com.slatekit:slatekit-telemetry:$slatekit_version"
        implementation "com.slatekit:kiit-apis:$slatekit_version"
        implementation "com.slatekit:slatekit-generator:$slatekit_version"
        implementation "com.slatekit:kiit-cli:$slatekit_version"
        implementation "com.slatekit:connectors-cli:$slatekit_version"
        implementation "com.slatekit:providers-logback:$slatekit_version"
//        implementation "com.slatekit:providers-aws:$slatekit_version"
//        implementation "com.slatekit:providers-datadog:$slatekit_version"
//        implementation "com.slatekit:connectors-entities:$slatekit_version"
//        implementation "com.slatekit:connectors-jobs:$slatekit_version"
//        implementation "com.slatekit:slatekit-core:$slatekit_version"
//        implementation "com.slatekit:slatekit-http:$slatekit_version"
//        implementation "com.slatekit:slatekit-cache:$slatekit_version"
//        implementation "com.slatekit:kiit-jobs:$slatekit_version"
//        implementation "com.slatekit:slatekit-notifications:$slatekit_version"
//        implementation "com.slatekit:slatekit-cloud:$slatekit_version"
//        implementation "com.slatekit:slatekit-db:$slatekit_version"
//        implementation "com.slatekit:slatekit-query:$slatekit_version"
//        implementation "com.slatekit:slatekit-entities:$slatekit_version"
//        implementation "com.slatekit:slatekit-orm:$slatekit_version"
//        implementation "com.slatekit:slatekit-integration:$slatekit_version"
//        implementation "com.slatekit:kiit-server:$slatekit_version"
    } else {
        // */
    implementation project(":slatekit-result")
    implementation project(":slatekit-common")
    implementation project(":slatekit-utils")
    implementation project(":slatekit-context")
    implementation project(":kiit-app")
    implementation project(":slatekit-meta")
    implementation project(":slatekit-policy")
    implementation project(":slatekit-serialization")
    implementation project(":slatekit-telemetry")
    implementation project(":slatekit-requests")
    implementation project(":kiit-apis")
    implementation project(":slatekit-generator")
    implementation project(":kiit-cli")
    implementation project(":connectors-cli")
    implementation project(":providers-logback")
    implementation project(":providers-kafka")
//        implementation project(":connectors-entities")
//        implementation project(":connectors-jobs")
//        implementation project(":providers-aws")
//        implementation project(":providers-datadog")
//        implementation project(":slatekit-core")
//        implementation project(":slatekit-http")
//        implementation project(":slatekit-cache")
//        implementation project(":kiit-jobs")
//        implementation project(":slatekit-notifications")
//        implementation project(":slatekit-cloud")
//        implementation project(":slatekit-db")
//        implementation project(":slatekit-query")
//        implementation project(":slatekit-entities")
//        implementation project(":slatekit-integration")
        implementation project(":kiit-server")
//        implementation project(":slatekit-samples")
    } //</slatekit_local>
//    implementation project(":slatekit-examples")
//    implementation project(":slatekit-samples")
//    implementation project(":slatekit-tests")
}

// ==================================================================
// Slate Kit Component Info
// ==================================================================
def slatekitComponentId = 'exe'
def slatekitComponentName = 'Exe'
def slatekitComponentDesc = 'SlateKit Exe: CLI application'
def slatekitComponentVersion = ext.slatekit_version

// ==================================================================
// Slate Kit Setup mode: defaults to maven vs loading project sources
// ==================================================================
task info {
    println('slatekit.setup     : ' + System.getenv('SLATEKIT_PROJECT_MODE'))
    println('slatekit.maven     : ' + slatekitSetupViaBinary)
    println('slatekit.comp.id   : ' + slatekitComponentId)
    println('slatekit.comp.name : ' + slatekitComponentName)
    println('slatekit.comp.desc : ' + slatekitComponentDesc)
    println('slatekit.comp.vers : ' + slatekitComponentVersion)
    println()
    println('project.name       : ' + project.name)
    println('project.path       : ' + project.path)
    println('project.desc       : ' + project.description)
    println('project.projectDir : ' + project.projectDir)
    println('project.buildDir   : ' + project.buildDir)
    println()
    println('build.commit       : ' + gitCommitId())
    println('build.branch       : ' + gitBranchName())
    println('build.date         : ' + getBuildDate())
}

// https://www.anexinet.com/blog/six-ways-to-package-a-java-application-with-gradle/
// gradle build distZip
mainClassName = 'kiit.RunKt'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

//jar {
//    manifest {
//        attributes(
//                'Main-Class': 'kiit.RunKt',
//                "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
//        )
//    }
//}

task copyAllJars(type: Copy) {
    dependsOn build
    into "lib"
    from configurations.runtime
}