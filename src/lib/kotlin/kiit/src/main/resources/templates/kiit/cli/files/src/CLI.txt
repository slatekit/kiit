package ${app.package}

import kiit.apis.*
import kiit.apis.routes.Api
import kiit.apis.support.Authenticator
import kiit.cli.CliSettings
import kiit.context.Context
import kiit.common.types.*
import kiit.common.info.ApiKey
import kiit.common.types.ContentType
import slatekit.connectors.cli.CliApi
import kiit.results.Try
import kiit.serialization.Serialization
import ${app.package}.apis.SampleAPI

class CLI(val ctx: Context) {

    /**
     * executes the CLI integrated with the API module
     * to be able to call APIs on the command line
     * @return
     */
    suspend fun execute(): Try<Any> {

        // 1. The API keys( DocApi, SetupApi are authenticated using an sample API key )
        val keys = listOf(ApiKey( name ="cli", key = "abc", roles = "dev,qa,ops,admin"))

        // 2. Authentication
        val auth = Authenticator(keys)

        // 3. Load all the Slate Kit Universal APIs
        val apis = apis()

        // 4. Makes the APIs accessible on the CLI runner
        val cli = CliApi(
                ctx = ctx,
                auth = auth,
                settings = CliSettings(enableLogging = true, enableOutput = true),
                apiItems = apis,
                metaTransform = {
                    listOf("api-key" to keys.first().key)
                },
                serializer = {item, type -> print(item, type)}
        )

        // 5. Run interactive mode
        cli.showOverview("Slate Kit CLI Sample")
        return cli.run()
    }


    fun apis(): List<Api> {
        return listOf(
                Api(klass = SampleAPI::class, singleton = SampleAPI(ctx), setup = SetupType.Annotated)
        )
    }


    private fun print(item:Any?, type:ContentType) : Content {
        val serializer = when(type){
            ContentTypeCsv -> Serialization.csv()
            ContentTypeProp -> Serialization.props()
            else -> Serialization.json()
        }
        val text = serializer.serialize(item)
        return if(type == ContentTypeJson) {
            val wrap = """{ "value" : $text }""".trimMargin()
            val body = org.json.JSONObject(wrap)
            val pretty = body.toString(4)
            Content.text(pretty)
        }
        else {
            when(type){
                ContentTypeCsv -> Content.csv(text)
                ContentTypeProp -> Content.prop(text)
                else -> Content.text(text)
            }
        }
    }
}